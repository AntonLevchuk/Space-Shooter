import {
  __commonJS
} from "./chunk-5WWUZCGV.js";

// node_modules/eventemitter3-timer/node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
  "node_modules/eventemitter3-timer/node_modules/eventemitter3/index.js"(exports, module) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__)
        prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
      if (!emitter._events[evt])
        emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn)
        emitter._events[evt].push(listener);
      else
        emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0)
        emitter._events = new Events();
      else
        delete emitter._events[evt];
    }
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      var names = [], events, name;
      if (this._eventsCount === 0)
        return names;
      for (name in events = this._events) {
        if (has.call(events, name))
          names.push(prefix ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers)
        return [];
      if (handlers.fn)
        return [handlers.fn];
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners)
        return 0;
      if (listeners.fn)
        return 1;
      return listeners.length;
    };
    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once)
          this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once)
            this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args)
                for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length)
          this._events[evt] = events.length === 1 ? events[0] : events;
        else
          clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt])
          clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;
    EventEmitter.prefixed = prefix;
    EventEmitter.EventEmitter = EventEmitter;
    if ("undefined" !== typeof module) {
      module.exports = EventEmitter;
    }
  }
});

// node_modules/eventemitter3-timer/dist/eventemitter3-timer.js
var require_eventemitter3_timer = __commonJS({
  "node_modules/eventemitter3-timer/dist/eventemitter3-timer.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory();
      else if (typeof define === "function" && define.amd)
        define([], factory);
      else if (typeof exports === "object")
        exports["EE3Timer"] = factory();
      else
        root["EE3Timer"] = factory();
    })(typeof self !== "undefined" ? self : exports, function() {
      return (
        /******/
        function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module2 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.l = true;
            return module2.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, {
                /******/
                configurable: false,
                /******/
                enumerable: true,
                /******/
                get: getter
                /******/
              });
            }
          };
          __webpack_require__.n = function(module2) {
            var getter = module2 && module2.__esModule ? (
              /******/
              function getDefault() {
                return module2["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module2;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 2);
        }([
          /* 0 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
                d.__proto__ = b;
              } || function(d, b) {
                for (var p in b)
                  if (b.hasOwnProperty(p))
                    d[p] = b[p];
              };
              return function(d, b) {
                extendStatics(d, b);
                function __() {
                  this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var TimerManager_1 = __webpack_require__(1);
            var eventemitter3_1 = __webpack_require__(3);
            var Timer = (
              /** @class */
              function(_super) {
                __extends(Timer2, _super);
                function Timer2(time) {
                  if (time === void 0) {
                    time = 1;
                  }
                  var _this = _super.call(this) || this;
                  _this.time = time;
                  if (!Timer2._timerManager)
                    Timer2._timerManager = new TimerManager_1.TimerManager();
                  Timer2._timerManager.addTimer(_this);
                  _this._timerManager = Timer2._timerManager;
                  _this.active = false;
                  _this.isEnded = false;
                  _this.isStarted = false;
                  _this.expire = false;
                  _this.delay = 0;
                  _this.repeat = 0;
                  _this.loop = false;
                  _this._delayTime = 0;
                  _this._elapsedTime = 0;
                  _this._repeat = 0;
                  return _this;
                }
                Object.defineProperty(Timer2, "timerManager", {
                  /**
                   * The global TimerManager which is default to all newly created timers.
                   *
                   * @static
                   * @type {TimerManager}
                   * @memberof Timer
                   */
                  get: function() {
                    if (!Timer2._timerManager)
                      Timer2._timerManager = new TimerManager_1.TimerManager();
                    return Timer2._timerManager;
                  },
                  enumerable: true,
                  configurable: true
                });
                Object.defineProperty(Timer2.prototype, "timerManager", {
                  /**
                   * The timerManager this timer is assigned to.
                   *
                   * @type {(TimerManager | null)}
                   * @memberof Timer
                   */
                  get: function() {
                    return this._timerManager;
                  },
                  set: function(value) {
                    this._timerManager = value;
                  },
                  enumerable: true,
                  configurable: true
                });
                Timer2.prototype.remove = function() {
                  Timer2._timerManager.removeTimer(this);
                  return this;
                };
                Timer2.prototype.start = function() {
                  this.active = true;
                  return this;
                };
                Timer2.prototype.stop = function() {
                  this.active = false;
                  this.emit("stop", this._elapsedTime);
                  return this;
                };
                Timer2.prototype.reset = function() {
                  this._elapsedTime = 0;
                  this._repeat = 0;
                  this._delayTime = 0;
                  this.isStarted = false;
                  this.isEnded = false;
                  return this;
                };
                Timer2.prototype.update = function(delta) {
                  if (!this.active)
                    return;
                  if (this.delay > this._delayTime) {
                    this._delayTime += delta;
                    return;
                  }
                  if (!this.isStarted) {
                    this.isStarted = true;
                    this.emit("start", this._elapsedTime);
                  }
                  if (this.time > this._elapsedTime) {
                    var t = this._elapsedTime + delta;
                    var ended = t >= this.time;
                    this._elapsedTime = ended ? this.time : t;
                    this.emit("update", this._elapsedTime, delta);
                    if (ended) {
                      if (this.loop || this.repeat > this._repeat) {
                        this._repeat++;
                        this.emit("repeat", this._elapsedTime, this._repeat);
                        this._elapsedTime = 0;
                        return;
                      }
                      this.isEnded = true;
                      this.active = false;
                      this.emit("end", this._elapsedTime);
                    }
                  }
                };
                return Timer2;
              }(eventemitter3_1.EventEmitter)
            );
            exports2.Timer = Timer;
          },
          /* 1 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", { value: true });
            var Timer_1 = __webpack_require__(0);
            var TimerManager = (
              /** @class */
              function() {
                function TimerManager2() {
                  this.timers = [];
                  this._timersToDelete = [];
                  this._last = 0;
                }
                TimerManager2.prototype.update = function(delta) {
                  if (!delta && delta !== 0) {
                    delta = this._getDeltaMS();
                  }
                  if (this._timersToDelete.length) {
                    for (var _i = 0, _a = this._timersToDelete; _i < _a.length; _i++) {
                      var timerToDel = _a[_i];
                      this._remove(timerToDel);
                    }
                    this._timersToDelete.length = 0;
                  }
                  for (var _b = 0, _c = this.timers; _b < _c.length; _b++) {
                    var timer = _c[_b];
                    if (timer.active) {
                      timer.update(delta);
                      if (timer.isEnded && timer.expire) {
                        this.removeTimer(timer);
                      }
                    }
                  }
                };
                TimerManager2.prototype.removeTimer = function(timer) {
                  this._timersToDelete.push(timer);
                  timer.timerManager = null;
                };
                TimerManager2.prototype.addTimer = function(timer) {
                  this.timers.push(timer);
                  if (timer.timerManager)
                    timer.timerManager.removeTimer(timer);
                  timer.timerManager = this;
                };
                TimerManager2.prototype.createTimer = function(time) {
                  var timer = new Timer_1.Timer(time);
                  this.addTimer(timer);
                  return timer;
                };
                TimerManager2.prototype._remove = function(timer) {
                  var index = this.timers.indexOf(timer);
                  if (index > -1) {
                    this.timers.splice(index, 1);
                  }
                };
                TimerManager2.prototype._getDeltaMS = function() {
                  if (this._last === 0)
                    this._last = Date.now();
                  var now = Date.now();
                  var deltaMS = now - this._last;
                  this._last = now;
                  return deltaMS;
                };
                return TimerManager2;
              }()
            );
            exports2.TimerManager = TimerManager;
          },
          /* 2 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", { value: true });
            var Timer_1 = __webpack_require__(0);
            exports2.Timer = Timer_1.Timer;
            var TimerManager_1 = __webpack_require__(1);
            exports2.TimerManager = TimerManager_1.TimerManager;
          },
          /* 3 */
          /***/
          function(module2, exports2) {
            module2.exports = require_eventemitter3();
          }
          /******/
        ])
      );
    });
  }
});
export default require_eventemitter3_timer();
//# sourceMappingURL=eventemitter3-timer.js.map
